{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\3D Objects\\\\Frontend Source Code\\\\src\\\\elements\\\\Form\\\\InputDate\\\\index.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport propTypes from \"prop-types\";\nimport { DateRange } from \"react-date-range\";\nimport \"./index.scss\";\nimport \"react-date-range/dist/styles.css\"; // main css file\n\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\n\nimport formatDate from \"utils/formatDate\";\nimport iconCalendar from \"assets/images/icons/icon-calendar.svg\";\nexport default function Date(props) {\n  const {\n    value,\n    placeholder,\n    name\n  } = props;\n  const [isShowed, setIsShowed] = useState(false);\n\n  const datePickerChange = value => {\n    const target = {\n      target: {\n        value: value.selection,\n        name: name\n      }\n    };\n    props.onChange(target);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  });\n  const refDate = useRef(null);\n\n  const handleClickOutside = event => {\n    if (refDate && !refDate.current.contains(event.target)) {\n      setIsShowed(false);\n    }\n  };\n\n  const check = focus => {\n    focus.indexOf(1) < 0 && setIsShowed(false);\n  };\n\n  const displayDate = `${value.startDate ? formatDate(value.startDate) : \"\"}${value.endDate ? \" - \" + formatDate(value.endDate) : \"\"}`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: refDate,\n    className: [\"input-date mb-3\", props.outerClassName].join(\" \")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group-prepend bg-gray-900\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: iconCalendar,\n    alt: \"icon calendar\"\n  }))), /*#__PURE__*/React.createElement(\"input\", {\n    readOnly: true,\n    type: \"text\",\n    className: \"form-control\",\n    value: displayDate,\n    placeholder: placeholder,\n    onClick: () => setIsShowed(!isShowed)\n  }), isShowed && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date-range-wrapper\"\n  }, /*#__PURE__*/React.createElement(DateRange, {\n    editableDateInputs: true,\n    onChange: datePickerChange,\n    moveRangeOnFirstSelection: false,\n    onRangeFocusChange: check,\n    ranges: [value]\n  }))));\n}\nDate.propTypes = {\n  value: propTypes.object,\n  onChange: propTypes.func,\n  placeholder: propTypes.string,\n  outerClassName: propTypes.string\n};","map":{"version":3,"sources":["C:/Users/USER/3D Objects/Frontend Source Code/src/elements/Form/InputDate/index.js"],"names":["React","useState","useRef","useEffect","propTypes","DateRange","formatDate","Date","props","value","placeholder","name","isShowed","setIsShowed","datePickerChange","target","selection","onChange","document","addEventListener","handleClickOutside","removeEventListener","refDate","event","current","contains","check","focus","indexOf","displayDate","startDate","endDate","outerClassName","join","iconCalendar","object","func","string"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { DateRange } from \"react-date-range\";\n\nimport \"./index.scss\";\nimport \"react-date-range/dist/styles.css\"; // main css file\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\n\nimport formatDate from \"utils/formatDate\";\nimport iconCalendar from \"assets/images/icons/icon-calendar.svg\";\n\nexport default function Date(props) {\n  const { value, placeholder, name } = props;\n  const [isShowed, setIsShowed] = useState(false);\n\n  const datePickerChange = (value) => {\n    const target = {\n      target: {\n        value: value.selection,\n        name: name,\n      },\n    };\n    props.onChange(target);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  });\n\n  const refDate = useRef(null);\n  const handleClickOutside = (event) => {\n    if (refDate && !refDate.current.contains(event.target)) {\n      setIsShowed(false);\n    }\n  };\n\n  const check = (focus) => {\n    focus.indexOf(1) < 0 && setIsShowed(false);\n  };\n\n  const displayDate = `${value.startDate ? formatDate(value.startDate) : \"\"}${\n    value.endDate ? \" - \" + formatDate(value.endDate) : \"\"\n  }`;\n\n  return (\n    <div\n      ref={refDate}\n      className={[\"input-date mb-3\", props.outerClassName].join(\" \")}\n    >\n      <div className=\"input-group\">\n        <div className=\"input-group-prepend bg-gray-900\">\n          <span className=\"input-group-text\">\n            <img src={iconCalendar} alt=\"icon calendar\" />\n          </span>\n        </div>\n        <input\n          readOnly\n          type=\"text\"\n          className=\"form-control\"\n          value={displayDate}\n          placeholder={placeholder}\n          onClick={() => setIsShowed(!isShowed)}\n        />\n\n        {isShowed && (\n          <div className=\"date-range-wrapper\">\n            <DateRange\n              editableDateInputs={true}\n              onChange={datePickerChange}\n              moveRangeOnFirstSelection={false}\n              onRangeFocusChange={check}\n              ranges={[value]}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nDate.propTypes = {\n  value: propTypes.object,\n  onChange: propTypes.func,\n  placeholder: propTypes.string,\n  outerClassName: propTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}